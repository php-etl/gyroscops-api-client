<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Gyroscops\Api\Normalizer;

use Gyroscops\Api\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PipelineDeclarePipelineCommandInputNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === \Gyroscops\Api\Model\PipelineDeclarePipelineCommandInput::class;
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && $data::class === \Gyroscops\Api\Model\PipelineDeclarePipelineCommandInput::class;
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Gyroscops\Api\Model\PipelineDeclarePipelineCommandInput();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('label', $data) && $data['label'] !== null) {
            $object->setLabel($data['label']);
        } elseif (\array_key_exists('label', $data) && $data['label'] === null) {
            $object->setLabel(null);
        }
        if (\array_key_exists('code', $data) && $data['code'] !== null) {
            $object->setCode($data['code']);
        } elseif (\array_key_exists('code', $data) && $data['code'] === null) {
            $object->setCode(null);
        }
        if (\array_key_exists('steps', $data) && $data['steps'] !== null) {
            $values = [];
            foreach ($data['steps'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Gyroscops\Api\Model\StepInput::class, 'json', $context);
            }
            $object->setSteps($values);
        } elseif (\array_key_exists('steps', $data) && $data['steps'] === null) {
            $object->setSteps(null);
        }
        if (\array_key_exists('autoloads', $data) && $data['autoloads'] !== null) {
            $values_1 = [];
            foreach ($data['autoloads'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Gyroscops\Api\Model\AutoloadInput::class, 'json', $context);
            }
            $object->setAutoloads($values_1);
        } elseif (\array_key_exists('autoloads', $data) && $data['autoloads'] === null) {
            $object->setAutoloads(null);
        }
        if (\array_key_exists('packages', $data) && $data['packages'] !== null) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['packages'] as $key => $value_2) {
                $values_2[$key] = $value_2;
            }
            $object->setPackages($values_2);
        } elseif (\array_key_exists('packages', $data) && $data['packages'] === null) {
            $object->setPackages(null);
        }
        if (\array_key_exists('repositories', $data) && $data['repositories'] !== null) {
            $values_3 = [];
            foreach ($data['repositories'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Gyroscops\Api\Model\AddPipelineComposerRepositoryCommandInput::class, 'json', $context);
            }
            $object->setRepositories($values_3);
        } elseif (\array_key_exists('repositories', $data) && $data['repositories'] === null) {
            $object->setRepositories(null);
        }
        if (\array_key_exists('auths', $data) && $data['auths'] !== null) {
            $values_4 = [];
            foreach ($data['auths'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Gyroscops\Api\Model\AddPipelineComposerAuthCommandInput::class, 'json', $context);
            }
            $object->setAuths($values_4);
        } elseif (\array_key_exists('auths', $data) && $data['auths'] === null) {
            $object->setAuths(null);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['label'] = $object->getLabel();
        $data['code'] = $object->getCode();
        $values = [];
        foreach ($object->getSteps() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $data['steps'] = $values;
        if (null !== $object->getAutoloads()) {
            $values_1 = [];
            foreach ($object->getAutoloads() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data['autoloads'] = $values_1;
        }
        if (null !== $object->getPackages()) {
            $values_2 = [];
            foreach ($object->getPackages() as $key => $value_2) {
                $values_2[$key] = $value_2;
            }
            $data['packages'] = $values_2;
        }
        if (null !== $object->getRepositories()) {
            $values_3 = [];
            foreach ($object->getRepositories() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data['repositories'] = $values_3;
        }
        if (null !== $object->getAuths()) {
            $values_4 = [];
            foreach ($object->getAuths() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data['auths'] = $values_4;
        }

        return $data;
    }
}
