<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Gyroscops\Api\Normalizer;

use Gyroscops\Api\Runtime\Normalizer\CheckArray;
use Gyroscops\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class VariableFromSecretReadNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return $type === 'Gyroscops\\Api\\Model\\VariableFromSecretRead';
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === 'Gyroscops\\Api\\Model\\VariableFromSecretRead';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Gyroscops\Api\Model\VariableFromSecretRead();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('secret', $data) && $data['secret'] !== null) {
            $value = $data['secret'];
            if (is_array($data['secret'])) {
                $value = $this->denormalizer->denormalize($data['secret'], 'Gyroscops\\Api\\Model\\SecretRead', 'json', $context);
            }
            $object->setSecret($value);
            unset($data['secret']);
        } elseif (\array_key_exists('secret', $data) && $data['secret'] === null) {
            $object->setSecret(null);
        }
        if (\array_key_exists('item', $data) && $data['item'] !== null) {
            $object->setItem($data['item']);
            unset($data['item']);
        } elseif (\array_key_exists('item', $data) && $data['item'] === null) {
            $object->setItem(null);
        }
        if (\array_key_exists('environment', $data) && $data['environment'] !== null) {
            $value_1 = $data['environment'];
            if (is_array($data['environment'])) {
                $value_1 = $this->denormalizer->denormalize($data['environment'], 'Gyroscops\\Api\\Model\\EnvironmentRead', 'json', $context);
            }
            $object->setEnvironment($value_1);
            unset($data['environment']);
        } elseif (\array_key_exists('environment', $data) && $data['environment'] === null) {
            $object->setEnvironment(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
            unset($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('secret') && null !== $object->getSecret()) {
            $value = $object->getSecret();
            if (is_object($object->getSecret())) {
                $value = $this->normalizer->normalize($object->getSecret(), 'json', $context);
            }
            $data['secret'] = $value;
        }
        if ($object->isInitialized('item') && null !== $object->getItem()) {
            $data['item'] = $object->getItem();
        }
        if ($object->isInitialized('environment') && null !== $object->getEnvironment()) {
            $value_1 = $object->getEnvironment();
            if (is_object($object->getEnvironment())) {
                $value_1 = $this->normalizer->normalize($object->getEnvironment(), 'json', $context);
            }
            $data['environment'] = $value_1;
        }
        if ($object->isInitialized('name') && null !== $object->getName()) {
            $data['name'] = $object->getName();
        }
        foreach ($object as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value_2;
            }
        }

        return $data;
    }
}
